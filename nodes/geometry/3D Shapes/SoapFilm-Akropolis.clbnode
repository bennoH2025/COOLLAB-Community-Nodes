// Inspired by Ken Brakke's "Soap film cones"
// https://kenbrakke.com/cones/cones.htm 
//
// Somthing lik a Soap Film Cube - Minimal surface in cubic frame 
// Creates a soap film structure with central flat surface and connecting films
// Idea and project coordination by bennoH.
// Coding by claude.ai in the Sonnet-4 model of Anthropic PBC on a "KostenlosPlan" of bennoH.
// This Coollab 3D-Shape-node by his name "SoapFilm-Akropolis.clbnode" is lizensed under GPLv3.0 by bennoH. 2025

// To learn how to write nodes, see https://coollab-art.com/Tutorials/Writing%20Nodes/Intro



INPUT float 'Frame Thickness'; /// Thickness of the cube frame edges (0.01 to 0.1)
INPUT float 'Film Thickness'; /// Thickness of the soap film surfaces (0.005 to 0.05)
INPUT float 'Center Size'; /// Size of the central flat surface (0.2 to 0.8)
INPUT float 'Roundness'; /// Smoothness of surface blending (0.01 to 0.2)
INPUT vec3 'Center Offset'; /// Offset of the central surface from cube center
INPUT float 'Edge Rounding'; /// Rounding radius of the frame edges (0 to 0.05)
INPUT bool 'Show Frame Only'; /// Show only the cube frame without films

// Helper function for rounded box SDF
float roundedBox(vec3 p, vec3 b, float r) {
    vec3 q = abs(p) - b;
    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0) - r;
}

// Helper function for cylinder SDF
float cylinder(vec3 p, float h, float r) {
    vec2 d = abs(vec2(length(p.xz), p.y)) - vec2(r, h);
    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));
}

// Helper function for capsule SDF with proper rounding
float capsule(vec3 p, vec3 a, vec3 b, float r) {
    vec3 pa = p - a;
    vec3 ba = b - a;
    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);
    return length(pa - ba * h) - r;
}

// Helper function for rounded edge
float roundedEdge(vec3 p, vec3 a, vec3 b, float thickness, float rounding) {
    float cap = capsule(p, a, b, thickness);
    if (rounding > 0.0) {
        cap = cap - rounding;
    }
    return cap;
}

// Smooth minimum function for blending
float smoothMin(float a, float b, float k) {
    float h = max(k - abs(a - b), 0.0) / k;
    return min(a, b) - h * h * h * k * (1.0 / 6.0);
}

// Create cube frame from 12 edges with proper rounding
float cubeFrame(vec3 p, float thickness, float rounding) {
    float frame = 1000.0;
    
    // Bottom edges
    frame = min(frame, roundedEdge(p, vec3(0, 0, 0), vec3(1, 0, 0), thickness, rounding));
    frame = min(frame, roundedEdge(p, vec3(1, 0, 0), vec3(1, 1, 0), thickness, rounding));
    frame = min(frame, roundedEdge(p, vec3(1, 1, 0), vec3(0, 1, 0), thickness, rounding));
    frame = min(frame, roundedEdge(p, vec3(0, 1, 0), vec3(0, 0, 0), thickness, rounding));
    
    // Top edges
    frame = min(frame, roundedEdge(p, vec3(0, 0, 1), vec3(1, 0, 1), thickness, rounding));
    frame = min(frame, roundedEdge(p, vec3(1, 0, 1), vec3(1, 1, 1), thickness, rounding));
    frame = min(frame, roundedEdge(p, vec3(1, 1, 1), vec3(0, 1, 1), thickness, rounding));
    frame = min(frame, roundedEdge(p, vec3(0, 1, 1), vec3(0, 0, 1), thickness, rounding));
    
    // Vertical edges
    frame = min(frame, roundedEdge(p, vec3(0, 0, 0), vec3(0, 0, 1), thickness, rounding));
    frame = min(frame, roundedEdge(p, vec3(1, 0, 0), vec3(1, 0, 1), thickness, rounding));
    frame = min(frame, roundedEdge(p, vec3(1, 1, 0), vec3(1, 1, 1), thickness, rounding));
    frame = min(frame, roundedEdge(p, vec3(0, 1, 0), vec3(0, 1, 1), thickness, rounding));
    
    return frame;
}

// Create central flat surface with proper scaling
float centralSurface(vec3 p, vec3 offset, float size, float thickness) {
    vec3 center = vec3(0.5, 0.5, 0.5) + offset;
    vec3 localP = p - center;
    
    // Create a rounded square in the XY plane with proper size scaling
    float actualSize = size * 0.5; // Scale from 0.2-0.8 to 0.1-0.4
    vec2 d = abs(localP.xy) - vec2(actualSize);
    float square2D = length(max(d, 0.0)) + min(max(d.x, d.y), 0.0) - 0.05; // Small rounding
    
    // Extrude to thickness
    float plane = max(square2D, abs(localP.z) - thickness);
    return plane;
}

// Create connecting films (simplified approximation)
float connectingFilms(vec3 p, vec3 offset, float size, float thickness, float roundness) {
    vec3 center = vec3(0.5, 0.5, 0.5) + offset;
    float films = 1000.0;
    
    // 8 corner connections - approximate as curved surfaces
    vec3 corners[8];
    corners[0] = vec3(0, 0, 0);
    corners[1] = vec3(1, 0, 0);
    corners[2] = vec3(1, 1, 0);
    corners[3] = vec3(0, 1, 0);
    corners[4] = vec3(0, 0, 1);
    corners[5] = vec3(1, 0, 1);
    corners[6] = vec3(1, 1, 1);
    corners[7] = vec3(0, 1, 1);
    
    for (int i = 0; i < 8; i++) {
        vec3 corner = corners[i];
        vec3 toCenter = normalize(center - corner);
        vec3 filmCenter = corner + toCenter * (0.5 - size * 0.25);
        
        // Create a curved surface connecting corner to center
        float distToFilm = length(p - filmCenter) - 0.2;
        
        // Modulate by distance to corner and center
        float cornerDist = length(p - corner);
        float centerDist = length(p.xy - center.xy);
        float mask = smoothstep(0.6, 0.3, cornerDist) * smoothstep(size * 0.7, size * 0.4, centerDist);
        
        distToFilm = mix(1000.0, distToFilm, mask);
        films = smoothMin(films, distToFilm, roundness * 0.1);
    }
    
    return films - thickness;
}

SignedDistance main(vec3 pos) {
    // Center the cube at origin
    vec3 p = pos - vec3(0.5, 0.5, 0.5);
    p += vec3(0.5, 0.5, 0.5);
    
    float result = 1000.0;
    
    // Cube frame
    float frame = cubeFrame(p, 'Frame Thickness', 'Edge Rounding');
    result = min(result, frame);
    
    if (!'Show Frame Only') {
        // Central surface
        float center = centralSurface(p, 'Center Offset', 'Center Size', 'Film Thickness');
        result = smoothMin(result, center, 'Roundness');
        
        // Connecting films with proper thickness
        float films = connectingFilms(p, 'Center Offset', 'Center Size', 'Film Thickness', 'Roundness');
        result = smoothMin(result, films, 'Roundness');
    }
    
    return result;
}
