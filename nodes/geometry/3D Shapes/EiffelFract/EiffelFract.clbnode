// Based on a Mandelbulber-setup by bennoH.
//
// Idea and project coordination by bennoH.
// Coding by claude.ai in the Sonnet-4 model of Anthropic PBC on a "KostenlosPlan" of bennoH.
// This Coollab 3D-Shape-node by his name "EiffelFract.clbnode" is lizensed under GPLv3.0 by bennoH. 2025
// Special credits to: Benoit Mandelbrot as the father of the fraktalmathematics and basic formula

// To learn how to write nodes, see https://coollab-art.com/Tutorials/Writing%20Nodes/Intro


INPUT int 'Iterations'; /// Number of fractal iterations (1-20)
INPUT float 'Scale'; /// Scale factor applied each iteration
INPUT float 'Box Size'; /// Size of the folding box
INPUT float 'Min Radius'; /// Minimum radius for sphere inversion
INPUT float 'Final Scale'; /// Final scaling factor for the result
INPUT vec3 'Offset'; /// Translation offset for each iteration

SignedDistance main(vec3 pos)
{
    vec4 p = vec4(pos, 1.0);
    
    for(int i = 0; i < 'Iterations'; i++) {
        // Box folding with adjustable size
        p.xyz = mod(p.xyz - 'Box Size', 2.0 * 'Box Size') - 'Box Size';
        
        // Add offset for more variation
        p.xyz += 'Offset';
        
        // Sphere inversion with minimum radius control
        float r2 = dot(p.xyz, p.xyz);
        r2 = max(r2, 'Min Radius' * 'Min Radius');
        p *= 'Scale' / r2;
    }
    
    // Return distance with final scaling
    return (length(p.xz) / p.w) * 'Final Scale';
}
