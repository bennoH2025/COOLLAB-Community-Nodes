// Icosahedron - A polyhedron with 20 triangular faces
// Inspired & based on freely available formulas on the web
// Idea and project coordination by bennoH.
// Coding by claude.ai in the Sonnet-4 model of Anthropic PBC on a "KostenlosPlan" of bennoH.
// This Coollab 3D-Shape-node by his name "Icosahedron.clbnode" is lizensed under GPLv3.0 by bennoH. 2025

// To learn how to write nodes, see https://coollab-art.com/Tutorials/Writing%20Nodes/Intro


INPUT float 'Radius'; /// Overall size of the icosahedron
INPUT float 'Vertices Radius'; /// Radius of spheres at vertices
INPUT float 'Edges Thickness'; /// Thickness of the edges
INPUT float 'Face Inset'; /// How much to inset the faces (0 = full faces, 1 = just frame)
INPUT float 'Roundness'; /// Overall roundness/smoothing factor
INPUT bool 'Wireframe Mode'; /// Show only edges and vertices
INPUT float 'Bevel Size'; /// Size of edge beveling
INPUT float 'Hollow Thickness'; /// Thickness for hollow version (0 = solid)
INPUT float 'Twist Angle'; /// Twist/rotation angle in radians
INPUT float 'Scale Variance'; /// Random scaling variance (0-1)
INPUT float 'Noise Displacement'; /// Surface displacement through noise

// Simple noise function
float hash(vec3 p) {
    p = fract(p * 0.3183099 + 0.1);
    p *= 17.0;
    return fract(p.x * p.y * p.z * (p.x + p.y + p.z));
}

float noise(vec3 p) {
    vec3 i = floor(p);
    vec3 f = fract(p);
    f = f * f * (3.0 - 2.0 * f);
    
    return mix(mix(mix(hash(i + vec3(0,0,0)), 
                       hash(i + vec3(1,0,0)), f.x),
                   mix(hash(i + vec3(0,1,0)), 
                       hash(i + vec3(1,1,0)), f.x), f.y),
               mix(mix(hash(i + vec3(0,0,1)), 
                       hash(i + vec3(1,0,1)), f.x),
                   mix(hash(i + vec3(0,1,1)), 
                       hash(i + vec3(1,1,1)), f.x), f.y), f.z);
}

// Rotation matrix around Y axis
mat3 rotateY(float angle) {
    float c = cos(angle);
    float s = sin(angle);
    return mat3(c, 0, s,
                0, 1, 0,
               -s, 0, c);
}

// Smooth minimum function for better blending
float smin(float a, float b, float k) {
    if (k <= 0.0) return min(a, b);
    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);
    return mix(b, a, h) - k * h * (1.0 - h);
}

// Correct icosahedron SDF (simplified and fixed)
float icosahedronSDF(vec3 p, float radius) {
    // Apply twist if enabled
    if ('Twist Angle' != 0.0) {
        float twist = 'Twist Angle' * (p.y / radius);
        p = rotateY(twist) * p;
    }
    
    // Apply scale variance
    if ('Scale Variance' > 0.0) {
        float variance = 1.0 + ('Scale Variance' * 0.2 * (noise(p * 5.0) - 0.5));
        p /= variance;
        radius *= variance;
    }
    
    // Scale position
    p = abs(p / radius);
    
    // Golden ratio
    float phi = 1.618033988749895;
    
    // Icosahedron is defined by these plane normals
    vec3 n1 = normalize(vec3(phi, 1.0, 0.0));
    vec3 n2 = vec3(0.57735026919); // normalize(vec3(1, 1, 1))
    
    // Calculate distances to planes
    float a = dot(p, n1.xyz);
    float b = dot(p, n1.zxy); 
    float c = dot(p, n1.yzx);
    float d = dot(p, n2) - n1.x;
    
    return max(max(max(a, b), c) - n1.x, d) * radius;
}

// Get icosahedron vertices
vec3[12] getIcosahedronVertices(float radius) {
    float phi = 1.618033988749895;
    
    vec3 vertices[12];
    vertices[0]  = normalize(vec3( 1.0,  phi,  0.0)) * radius;
    vertices[1]  = normalize(vec3(-1.0,  phi,  0.0)) * radius;
    vertices[2]  = normalize(vec3( 1.0, -phi,  0.0)) * radius;
    vertices[3]  = normalize(vec3(-1.0, -phi,  0.0)) * radius;
    vertices[4]  = normalize(vec3( 0.0,  1.0,  phi)) * radius;
    vertices[5]  = normalize(vec3( 0.0, -1.0,  phi)) * radius;
    vertices[6]  = normalize(vec3( 0.0,  1.0, -phi)) * radius;
    vertices[7]  = normalize(vec3( 0.0, -1.0, -phi)) * radius;
    vertices[8]  = normalize(vec3( phi,  0.0,  1.0)) * radius;
    vertices[9]  = normalize(vec3(-phi,  0.0,  1.0)) * radius;
    vertices[10] = normalize(vec3( phi,  0.0, -1.0)) * radius;
    vertices[11] = normalize(vec3(-phi,  0.0, -1.0)) * radius;
    
    return vertices;
}

// Distance to vertices
float icosahedronVertices(vec3 pos, float radius, float vertexRadius) {
    if (vertexRadius <= 0.0) return 1000.0;
    
    vec3[12] vertices = getIcosahedronVertices(radius);
    
    float minDist = 1000.0;
    for (int i = 0; i < 12; i++) {
        float dist = length(pos - vertices[i]) - vertexRadius;
        minDist = min(minDist, dist);
    }
    
    return minDist;
}

// Distance to line segment
float distanceToLineSegment(vec3 p, vec3 a, vec3 b) {
    vec3 pa = p - a;
    vec3 ba = b - a;
    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);
    return length(pa - ba * h);
}

// Distance to edges
float icosahedronEdges(vec3 pos, float radius, float thickness) {
    if (thickness <= 0.0) return 1000.0;
    
    vec3[12] vertices = getIcosahedronVertices(radius);
    
    // Icosahedron edge connections
    int edges[60] = int[60](
        0, 1,   0, 4,   0, 6,   0, 8,   0, 10,
        1, 4,   1, 6,   1, 9,   1, 11,
        2, 3,   2, 5,   2, 7,   2, 8,   2, 10,
        3, 5,   3, 7,   3, 9,   3, 11,
        4, 5,   4, 8,   4, 9,
        5, 8,   5, 9,
        6, 7,   6, 10,  6, 11,
        7, 10,  7, 11,
        8, 10,
        9, 11
    );
    
    float minDist = 1000.0;
    for (int i = 0; i < 30; i++) {
        int v1 = edges[i * 2];
        int v2 = edges[i * 2 + 1];
        float dist = distanceToLineSegment(pos, vertices[v1], vertices[v2]) - thickness;
        minDist = min(minDist, dist);
    }
    
    return minDist;
}

SignedDistance main(vec3 pos) {
    vec3 originalPos = pos;
    
    // Apply noise displacement to original position
    if ('Noise Displacement' > 0.0) {
        vec3 noiseOffset = vec3(
            noise(pos * 8.0),
            noise(pos * 8.0 + vec3(100.0)),
            noise(pos * 8.0 + vec3(200.0))
        ) - 0.5;
        pos += noiseOffset * 'Noise Displacement' * 0.05;
    }
    
    // Get base icosahedron distance
    float baseDist = icosahedronSDF(pos, 'Radius');
    
    // Apply face inset
    float faceDist = baseDist;
    if ('Face Inset' > 0.0) {
        faceDist = abs(baseDist) - 'Face Inset' * 'Radius' * 0.1;
    }
    
    float result;
    
    if ('Wireframe Mode') {
        // Wireframe mode: combine edges and vertices only
        float edgeDist = icosahedronEdges(originalPos, 'Radius', 'Edges Thickness');
        float vertexDist = icosahedronVertices(originalPos, 'Radius', 'Vertices Radius');
        
        if ('Vertices Radius' > 0.0 && 'Edges Thickness' > 0.0) {
            result = min(edgeDist, vertexDist);
        } else if ('Vertices Radius' > 0.0) {
            result = vertexDist;
        } else {
            result = edgeDist;
        }
    } else {
        // Normal mode: start with face
        result = faceDist;
        
        // Add edges if they have thickness
        if ('Edges Thickness' > 0.0) {
            float edgeDist = icosahedronEdges(originalPos, 'Radius', 'Edges Thickness');
            if ('Roundness' > 0.0) {
                result = smin(result, edgeDist, 'Roundness' * 0.02);
            } else {
                result = min(result, edgeDist);
            }
        }
        
        // Add vertices if they have radius
        if ('Vertices Radius' > 0.0) {
            float vertexDist = icosahedronVertices(originalPos, 'Radius', 'Vertices Radius');
            if ('Roundness' > 0.0) {
                result = smin(result, vertexDist, 'Roundness' * 0.02);
            } else {
                result = min(result, vertexDist);
            }
        }
    }
    
    // Apply bevel
    if ('Bevel Size' > 0.0) {
        result = abs(result) - 'Bevel Size';
    }
    
    // Apply hollow effect
    if ('Hollow Thickness' > 0.0) {
        result = abs(result) - 'Hollow Thickness';
    }
    
    // Apply overall roundness
    if ('Roundness' > 0.0 && !'Wireframe Mode') {
        result -= 'Roundness' * 0.5;
    }
    
    return result;
}
